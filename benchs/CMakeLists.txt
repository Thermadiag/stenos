cmake_minimum_required(VERSION 3.8)
#include(CTest) # We include CTest which is part of CMake



enable_testing()
# create the testing file and list of tests
create_test_sourcelist (Benchs
  stenos_benchs.cpp
  bench_img.cpp
  )

# add the executable
add_executable (stenos_benchs ${Benchs})

#Add blosc2
find_package(Blosc2)
if(Blosc2_FOUND)
	message(STATUS "Add blosc2 to benchmarks")
	target_link_libraries(stenos_benchs PRIVATE Blosc2::blosc2_static)
	target_compile_definitions(stenos_benchs PRIVATE -DHAS_BLOSC)
endif()


set_property(TARGET stenos_benchs PROPERTY CXX_STANDARD 14)


find_package(zstd REQUIRED)
target_link_libraries(stenos_benchs PRIVATE libzstd_static)
target_link_directories(stenos_benchs PRIVATE ${ZSTD_LIB_DIR})
target_include_directories(stenos_benchs PRIVATE ${ZSTD_INCLUDE_DIR})

# msvc warnings generated by stenos_benchs.cpp
target_compile_definitions(stenos_benchs PRIVATE -D_CRT_SECURE_NO_WARNINGS)



if(STENOS_BUILD_STATIC)
target_link_libraries(stenos_benchs PRIVATE stenos_static)
message(STATUS "Link benchmarks with static stenos")
else()
target_link_libraries(stenos_benchs PRIVATE stenos)
message(STATUS "Link benchmarks with shared stenos")
endif()

target_include_directories(stenos_benchs PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(stenos_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../..)
target_include_directories(stenos_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/..)

# remove the test driver source file
set (BenchsToRun ${Benchs})
remove (BenchsToRun stenos_benchs.cpp)

# Add all the ADD_TEST for each test
foreach (bench ${BenchsToRun})
  get_filename_component (TName ${bench} NAME_WE)
  add_test (NAME ${TName} COMMAND stenos_benchs ${TName})
endforeach ()

install (TARGETS stenos_benchs RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )