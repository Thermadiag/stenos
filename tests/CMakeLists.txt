cmake_minimum_required(VERSION 3.8)
#include(CTest) # We include CTest which is part of CMake



enable_testing()
# create the testing file and list of tests
create_test_sourcelist (Tests
stenos_tests.cpp
  tests.cpp
  test_cvector.cpp
 )

# add the executable
add_executable (stenos_tests ${Tests})

set_property(TARGET stenos_tests PROPERTY CXX_STANDARD 14)


# msvc warnings generated by stenos_benchs.cpp
target_compile_definitions(stenos_tests PRIVATE -D_CRT_SECURE_NO_WARNINGS)

if(STENOS_BUILD_STATIC)
target_link_libraries(stenos_tests PRIVATE stenos_static)
message(STATUS "Link benchmarks with static stenos")
else()
target_link_libraries(stenos_tests PRIVATE stenos)
message(STATUS "Link benchmarks with shared stenos")
endif()

# if(STENOS_NO_WARNINGS)
	# if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
		# target_compile_options(stenos_tests PRIVATE  /WX /W3 )
	# elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
		# target_compile_options(stenos_tests PRIVATE -Werror -Wall -Wno-c++98-compat -Wno-c++98-compat-pedantic)
	# else()
		# target_compile_options(stenos_tests PRIVATE -Werror -Wall)
	# endif()
# endif()

#TEST
find_package(OpenMP)
		if(OPENMP_FOUND)
			target_compile_options(stenos_tests PRIVATE "${OpenMP_C_FLAGS} ${OpenMP_CXX_FLAGS}")
			target_link_libraries(stenos_tests PRIVATE OpenMP::OpenMP_CXX)
		else()
			message(WARNING "OpenMP not found!")
		endif()

target_include_directories(stenos_tests PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(stenos_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../..)
target_include_directories(stenos_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/..)

# remove the test driver source file
set (TestsToRun ${Tests})
remove (TestsToRun stenos_tests.cpp)

# Add all the ADD_TEST for each test
foreach (test ${TestsToRun})
  get_filename_component (TName ${test} NAME_WE)
  add_test (NAME ${TName} COMMAND stenos_tests ${TName})
endforeach ()

install (TARGETS stenos_tests RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )
